{
  "compilerOptions": {
    "target": "esnext", // 使用最新的 ECMAScript 版本
    "module": "esnext", // 使用最新的 ECMAScript 模块系统
    "moduleResolution": "node", // 使用 Node.js 的模块解析策略
    "importHelpers": true, // importHelpers: 当为 true 时，TypeScript 会引入辅助函数来帮助处理模块导入。通常在使用 --isolatedModules 选项时会用到。
    "jsx": "preserve", // jsx: 指定 JSX 代码的处理方式。在这里是 preserve，表示保留 JSX 代码，不进行转换。
    "esModuleInterop": true, // 允许导入默认导出的模块成为命名空间对象。
    "sourceMap": true, // 生成源映射文件，用于调试。
    "baseUrl": "./", // 设置根文件夹，用于解析非相对模块的路径。
    "skipLibCheck": true, // 跳过对声明文件的类型检查。
    "experimentalDecorators": true, // 启用实验性的装饰器特性。
    "strict": true, // 开启所有严格类型检查选项
    "resolveJsonModule": true, // 允许导入 JSON 模块，即允许使用 import data from './data.json'; 的语法。
    "allowSyntheticDefaultImports": true, // 允许导入没有默认导出的模块时，使用 import x from 'module'; 的语法。
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "@@/*": [
        "./src/.umi/*"
      ],
    }
  },
  "include": [
    "./**/*.d.ts",
    "./**/*.ts",
    "./**/*.tsx",
    ".eslintrc.js"
  ]
}